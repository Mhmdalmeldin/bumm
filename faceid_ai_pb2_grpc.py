# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import faceid_ai_pb2 as faceid__ai__pb2


class FaceIdAiStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetFeatureVector = channel.unary_unary(
                '/rpc.FaceIdAi/GetFeatureVector',
                request_serializer=faceid__ai__pb2.Image.SerializeToString,
                response_deserializer=faceid__ai__pb2.FaceEmbedding.FromString,
                )
        self.BeAtYourDesk = channel.unary_unary(
                '/rpc.FaceIdAi/BeAtYourDesk',
                request_serializer=faceid__ai__pb2.EmployeeInfo.SerializeToString,
                response_deserializer=faceid__ai__pb2.EmployeeStatus.FromString,
                )


class FaceIdAiServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetFeatureVector(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BeAtYourDesk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FaceIdAiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetFeatureVector': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFeatureVector,
                    request_deserializer=faceid__ai__pb2.Image.FromString,
                    response_serializer=faceid__ai__pb2.FaceEmbedding.SerializeToString,
            ),
            'BeAtYourDesk': grpc.unary_unary_rpc_method_handler(
                    servicer.BeAtYourDesk,
                    request_deserializer=faceid__ai__pb2.EmployeeInfo.FromString,
                    response_serializer=faceid__ai__pb2.EmployeeStatus.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rpc.FaceIdAi', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FaceIdAi(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetFeatureVector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.FaceIdAi/GetFeatureVector',
            faceid__ai__pb2.Image.SerializeToString,
            faceid__ai__pb2.FaceEmbedding.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BeAtYourDesk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.FaceIdAi/BeAtYourDesk',
            faceid__ai__pb2.EmployeeInfo.SerializeToString,
            faceid__ai__pb2.EmployeeStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
